// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id  Int @id @default(autoincrement())
  email String @unique
  hash String
  hashedRt String?
  firstName String
  lastName String
  phone String?
  roleId Int @default(1)
  role Role @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)

  events Event[]

  @@map("users")
}

model PasswordHistory {
  userId Int @unique
  passwordHistory String

  @@map ("password-history")
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique

  users User[] // One-to-many relationship with User

  @@map("roles")  // Maps to the roles table in PostgreSQL
}

model Event {
  id Int @id @default(autoincrement())
  user_id Int @unique
  name String @db.VarChar(255)
  description String @db.Text
  event_type_id Int
  date DateTime @db.Timestamp(6)
  status_id Int
  location String @db.VarChar(255)
  budget Decimal @db.Decimal(10, 2)
  total_spent Decimal @db.Decimal(10, 2)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)
  is_deleted Boolean @default(false)

  user User @relation(fields: [user_id], references: [id])
  event_type EventType @relation(fields: [event_type_id], references: [id])
  event_status EventStatus @relation(fields: [status_id], references: [id])
  service_bookings EventService[]

  @@map("events")
}

model EventType {
  id Int @id @default(autoincrement())
  name String @unique

  is_deleted Boolean @default(false)

  events Event[]
}

model EventStatus {
  id Int @id @default(autoincrement())
  name String @unique

  is_deleted Boolean @default(false)

  events Event[]
}

model Service {
  id Int @id @default(autoincrement())
  name String
  description String
  service_type_id Int
  price Decimal @db.Decimal()

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)
  is_deleted Boolean @default(false)

  service_bookings EventService[]
  service_type ServiceType @relation(fields: [service_type_id], references: [id])
}

model ServiceType {
  id Int @id @default(autoincrement())
  name String @unique

  is_deleted Boolean @default(false)

  services Service[]
}

model EventService {
  id Int @id @default(autoincrement())
  event_id Int
  service_id Int
  start_date DateTime @db.Timestamp()
  end_date DateTime @db.Timestamp()

  is_deleted Boolean @default(false)

  service Service @relation(fields: [service_id], references: [id])
  event Event @relation(fields: [event_id], references: [id])

  @@map("event-services")
}
